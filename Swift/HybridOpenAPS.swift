import Combine
import Foundation

// MARK: - HybridOpenAPS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ OpenAPS

// –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ Constants.swift

// MARK: - –ì–∏–±—Ä–∏–¥–Ω—ã–π OpenAPS: Swift + JavaScript —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–π

// –ü–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É Swift –∏ JS —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é

final class HybridOpenAPS {
    private let storage: FileStorage
    private let processQueue = DispatchQueue(label: "HybridOpenAPS.processQueue", qos: .utility)
    private var cancellables = Set<AnyCancellable>()

    // JavaScript worker –¥–ª—è fallback –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    private let jsWorker = JavaScriptWorker()

    // Swift coordinator –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    private let swiftCoordinator: SwiftOpenAPSCoordinator

    init(storage: FileStorage) {
        self.storage = storage
        swiftCoordinator = SwiftOpenAPSCoordinator(storage: storage)
    }

    // MARK: - –ì–∏–±—Ä–∏–¥–Ω—ã–π determine basal —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

    func determineBasal(currentTemp: TempBasal, clock: Date = Date()) -> Future<Suggestion?, Never> {
        Future { promise in
            self.processQueue.async {
                // üöÄ FreeAPS X: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º Swift –∞–ª–≥–æ—Ä–∏—Ç–º—ã
                // let settings = self.loadSettings() // –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è Swift-only —Ä–µ–∂–∏–º–∞

                // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º Swift –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ FreeAPS X
                self.executeSwiftWithComparison(
                    currentTemp: currentTemp,
                    clock: clock,
                    settings: FreeAPSSettings() // –ó–∞–≥–ª—É—à–∫–∞
                ) { suggestion in
                    promise(.success(suggestion))
                }
            }
        }
    }

    // MARK: - Swift —Ä–µ–∂–∏–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º

    private func executeSwiftWithComparison(
        currentTemp: TempBasal,
        clock: Date,
        settings _: FreeAPSSettings,
        completion: @escaping (Suggestion?) -> Void
    ) {
        info(.openAPS, "üöÄ FreeAPS X: Using Swift OpenAPS algorithms (PERFORMANCE MODE)")

        // –í—ã–ø–æ–ª–Ω—è–µ–º Swift –≤–µ—Ä—Å–∏—é
        debug(.openAPS, "üîß DEBUG: About to call swiftCoordinator.determineBasal...")
        debug(.openAPS, "üîß DEBUG: swiftCoordinator is nil? \(swiftCoordinator == nil ? "YES" : "NO")")
        swiftCoordinator.determineBasal(currentTemp: currentTemp, clock: clock)
            .sink { swiftSuggestion in
                debug(.openAPS, "üîß DEBUG: Swift algorithm completed, suggestion is nil? \(swiftSuggestion == nil ? "YES" : "NO")")

                if let suggestion = swiftSuggestion {
                    debug(
                        .openAPS,
                        "üîß DEBUG: Swift suggestion - rate: \(suggestion.rate ?? 0), duration: \(suggestion.duration ?? 0)"
                    )
                } else {
                    warning(.openAPS, "üîß DEBUG: Swift returned nil suggestion!")
                }

                // DISABLED: JavaScript comparison causes crashes - using Swift-only mode for stability
                // if settings.logSwiftVsJSComparison {
                //     // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                //     self.executeJavaScriptForComparison(
                //         currentTemp: currentTemp,
                //         clock: clock,
                //         swiftSuggestion: swiftSuggestion
                //     )
                // }

                // üöÄ PERFORMANCE MODE: Swift-only execution (no JavaScript comparison)
                info(.openAPS, "üèÜ FreeAPS X: Pure Swift mode - JavaScript comparison disabled for stability")

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Swift —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                completion(swiftSuggestion)

            }.store(in: &cancellables)
    }

    private func executeJavaScriptForComparison(
        currentTemp: TempBasal,
        clock: Date,
        swiftSuggestion: Suggestion?
    ) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –≤–µ—Ä—Å–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è!)
        info(.openAPS, "üìä Running JavaScript for comparison with Swift results...")

        let startTime = CFAbsoluteTimeGetCurrent()

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ –∏ –¥–ª—è Swift
        let pumpHistory = loadFileFromStorage(name: OpenAPS.Monitor.pumpHistory)
        let carbs = loadFileFromStorage(name: OpenAPS.Monitor.carbHistory)
        let glucose = loadFileFromStorage(name: OpenAPS.Monitor.glucose)
        let profile = loadFileFromStorage(name: OpenAPS.Settings.profile)
        let basalProfile = loadFileFromStorage(name: OpenAPS.Settings.basalProfile)
        let autosens = loadFileFromStorage(name: OpenAPS.Settings.autosense)
        let reservoir = loadFileFromStorage(name: OpenAPS.Monitor.reservoir)

        // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript meal calculation
        let jsMeal = meal(
            pumphistory: pumpHistory,
            profile: profile,
            basalProfile: basalProfile,
            clock: clock,
            carbs: carbs,
            glucose: glucose
        )

        // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript IOB calculation
        let jsIOB = iob(
            pumphistory: pumpHistory,
            profile: profile,
            clock: clock,
            autosens: autosens.isEmpty ? RawJSON.null : autosens
        )

        // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript determine-basal
        let jsSuggestion = determineBasal(
            glucose: glucose,
            currentTemp: currentTemp.rawJSON,
            iob: jsIOB,
            profile: profile,
            autosens: autosens.isEmpty ? RawJSON.null : autosens,
            meal: jsMeal,
            microBolusAllowed: true,
            reservoir: reservoir,
            pumpHistory: pumpHistory
        )

        let jsTime = CFAbsoluteTimeGetCurrent() - startTime

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logComparisonResults(
            swiftSuggestion: swiftSuggestion,
            jsSuggestion: jsSuggestion,
            jsTime: jsTime
        )
    }

    // MARK: - JavaScript —Ä–µ–∂–∏–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)

    private func executeJavaScriptMode(
        currentTemp: TempBasal,
        clock: Date,
        promise: @escaping (Suggestion?) -> Void
    ) {
        info(.openAPS, "üìú FreeAPS X: Using JavaScript OpenAPS algorithms (COMPATIBILITY MODE)")

        // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ JavaScript –∫–∞–∫ –≤ OpenAPS.swift
        debug(.openAPS, "Start determineBasal")

        // clock
        storage.save(clock, as: OpenAPS.Monitor.clock)

        // temp_basal
        let tempBasal = currentTemp.rawJSON
        storage.save(tempBasal, as: OpenAPS.Monitor.tempBasal)

        // meal
        let pumpHistory = loadFileFromStorage(name: OpenAPS.Monitor.pumpHistory)
        let carbs = loadFileFromStorage(name: OpenAPS.Monitor.carbHistory)
        let glucose = loadFileFromStorage(name: OpenAPS.Monitor.glucose)
        let profile = loadFileFromStorage(name: OpenAPS.Settings.profile)
        let basalProfile = loadFileFromStorage(name: OpenAPS.Settings.basalProfile)

        let meal = self.meal(
            pumphistory: pumpHistory,
            profile: profile,
            basalProfile: basalProfile,
            clock: clock,
            carbs: carbs,
            glucose: glucose
        )

        storage.save(meal, as: OpenAPS.Monitor.meal)

        // iob
        let autosens = loadFileFromStorage(name: OpenAPS.Settings.autosense)
        let iob = self.iob(
            pumphistory: pumpHistory,
            profile: profile,
            clock: clock,
            autosens: autosens.isEmpty ? RawJSON.null : autosens
        )

        storage.save(iob, as: OpenAPS.Monitor.iob)

        // determine-basal
        let reservoir = loadFileFromStorage(name: OpenAPS.Monitor.reservoir)

        let suggested = determineBasal(
            glucose: glucose,
            currentTemp: tempBasal,
            iob: iob,
            profile: profile,
            autosens: autosens.isEmpty ? RawJSON.null : autosens,
            meal: meal,
            microBolusAllowed: true,
            reservoir: reservoir,
            pumpHistory: pumpHistory
        )

        debug(.openAPS, "SUGGESTED: \(suggested)")

        if var suggestion = Suggestion(from: suggested) {
            suggestion.timestamp = suggestion.deliverAt ?? clock
            storage.save(suggestion, as: OpenAPS.Enact.suggested)
            promise(suggestion)
        } else {
            warning(.openAPS, "Failed to parse suggestion from JavaScript result: \(suggested.prefix(200))...")
            promise(nil)
        }
    }

    // MARK: - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π Swift vs JavaScript

    private func logComparisonResults(
        swiftSuggestion: Suggestion?,
        jsSuggestion: RawJSON,
        jsTime: TimeInterval
    ) {
        var comparisonLog = "üîç SWIFT vs JAVASCRIPT COMPARISON:\n"
        comparisonLog += String(repeating: "=", count: 50) + "\n"

        // –ü–∞—Ä—Å–∏–º JavaScript —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if let jsSuggestionObj = Suggestion(from: jsSuggestion) {
            comparisonLog += "üìä RESULTS COMPARISON:\n"

            if let swift = swiftSuggestion {
                comparisonLog += "Swift Rate: \(swift.rate?.formatted() ?? "nil") U/hr\n"
                comparisonLog += "JS Rate:    \(jsSuggestionObj.rate?.formatted() ?? "nil") U/hr\n"

                comparisonLog += "Swift Duration: \(swift.duration?.formatted() ?? "nil") min\n"
                comparisonLog += "JS Duration:    \(jsSuggestionObj.duration?.formatted() ?? "nil") min\n"

                comparisonLog += "Swift Units: \(swift.units?.formatted() ?? "nil") U\n"
                comparisonLog += "JS Units:    \(jsSuggestionObj.units?.formatted() ?? "nil") U\n"

                comparisonLog += "Swift Reason: \(swift.reason ?? "nil")\n"
                comparisonLog += "JS Reason:    \(jsSuggestionObj.reason ?? "nil")\n"

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
                let rateDiff = abs((swift.rate ?? 0) - (jsSuggestionObj.rate ?? 0))
                let durationDiff = abs((swift.duration ?? 0) - (jsSuggestionObj.duration ?? 0))
                let unitsDiff = abs((swift.units ?? 0) - (jsSuggestionObj.units ?? 0))

                if rateDiff > 0.01 || durationDiff > 0 || unitsDiff > 0.01 {
                    comparisonLog += "‚ö†Ô∏è  DIFFERENCE DETECTED!\n"
                    comparisonLog += "Rate diff: \(rateDiff) U/hr\n"
                    comparisonLog += "Duration diff: \(durationDiff) min\n"
                    comparisonLog += "Units diff: \(unitsDiff) U\n"
                } else {
                    comparisonLog += "‚úÖ RESULTS IDENTICAL - Swift working correctly!\n"
                }
            } else {
                comparisonLog += "‚ùå Swift returned nil, JS returned: \(jsSuggestion.prefix(100))\n"
            }
        } else {
            comparisonLog += "‚ùå Failed to parse JS result: \(jsSuggestion.prefix(100))\n"
        }

        comparisonLog += "\n‚ö° PERFORMANCE:\n"
        comparisonLog += "JavaScript time: \(String(format: "%.3f", jsTime))s\n"
        comparisonLog += "Swift expected: ~10-50x faster\n"
        comparisonLog += String(repeating: "=", count: 50)

        info(.openAPS, comparisonLog)
    }

    // MARK: - JavaScript —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–æ–ø–∏—è –∏–∑ OpenAPS.swift)

    private func iob(pumphistory: JSON, profile: JSON, clock: JSON, autosens: JSON) -> RawJSON {
        dispatchPrecondition(condition: .onQueue(processQueue))
        return jsWorker.inCommonContext { worker in
            worker.evaluate(script: Script(name: OpenAPS.Prepare.log))
            worker.evaluate(script: Script(name: OpenAPS.Bundle.iob))
            worker.evaluate(script: Script(name: OpenAPS.Prepare.iob))
            return worker.call(function: OpenAPS.Function.generate, with: [
                pumphistory,
                profile,
                clock,
                autosens
            ])
        }
    }

    private func meal(pumphistory: JSON, profile: JSON, basalProfile: JSON, clock: Date, carbs: JSON, glucose: JSON) -> RawJSON {
        dispatchPrecondition(condition: .onQueue(processQueue))
        return jsWorker.inCommonContext { worker in
            worker.evaluate(script: Script(name: OpenAPS.Prepare.log))
            worker.evaluate(script: Script(name: OpenAPS.Bundle.meal))
            worker.evaluate(script: Script(name: OpenAPS.Prepare.meal))
            return worker.call(function: OpenAPS.Function.generate, with: [
                pumphistory,
                profile,
                clock.rawJSON,
                glucose,
                basalProfile,
                carbs
            ])
        }
    }

    private func determineBasal(
        glucose: JSON,
        currentTemp: JSON,
        iob: JSON,
        profile: JSON,
        autosens: JSON,
        meal: JSON,
        microBolusAllowed: Bool,
        reservoir: JSON,
        pumpHistory: JSON
    ) -> RawJSON {
        dispatchPrecondition(condition: .onQueue(processQueue))
        return jsWorker.inCommonContext { worker in
            worker.evaluate(script: Script(name: OpenAPS.Prepare.log))
            worker.evaluate(script: Script(name: OpenAPS.Prepare.determineBasal))
            worker.evaluate(script: Script(name: OpenAPS.Bundle.basalSetTemp))
            worker.evaluate(script: Script(name: OpenAPS.Bundle.getLastGlucose))
            worker.evaluate(script: Script(name: OpenAPS.Bundle.determineBasal))

            if let middleware = middlewareScript(name: OpenAPS.Middleware.determineBasal) {
                worker.evaluate(script: middleware)
            }

            return worker.call(
                function: OpenAPS.Function.generate,
                with: [
                    iob,
                    currentTemp,
                    glucose,
                    profile,
                    autosens,
                    meal,
                    microBolusAllowed,
                    reservoir,
                    false, // clock
                    pumpHistory
                ]
            )
        }
    }

    // MARK: - Helper functions

    private func loadSettings() -> FreeAPSSettings {
        storage.retrieve(OpenAPS.FreeAPS.settings, as: FreeAPSSettings.self) ?? FreeAPSSettings()
    }

    private func loadFileFromStorage(name: String) -> RawJSON {
        storage.retrieveRaw(name) ?? OpenAPS.defaults(for: name)
    }

    private func middlewareScript(name: String) -> Script? {
        if let body = storage.retrieveRaw(name) {
            return Script(name: "Middleware", body: body)
        }

        if let url = Foundation.Bundle.main.url(forResource: "javascript/\(name)", withExtension: "") {
            return Script(name: "Middleware", body: try! String(contentsOf: url))
        }

        return nil
    }
}

// MARK: - Autosens support

extension HybridOpenAPS {
    func autosense() -> Future<Autosens?, Never> {
        Future { promise in
            self.processQueue.async {
                // üöÄ FreeAPS X: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º Swift –∞–≤—Ç–æ—Å–µ–Ω—Å
                // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º Swift –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ FreeAPS X
                self.swiftCoordinator.autosense()
                    .sink { autosens in
                        promise(.success(autosens))
                    }.store(in: &self.cancellables)
            }
        }
    }

    // MARK: - Autotune support (NEW!)

    func autotune(categorizeUamAsBasal: Bool = false, tuneInsulinCurve: Bool = false) -> Future<Autotune?, Never> {
        Future { promise in
            self.processQueue.async {
                // üöÄ FreeAPS X: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º Swift autotune
                info(.openAPS, "üöÄ FreeAPS X: Using Swift Autotune algorithms (PERFORMANCE MODE)")

                self.swiftCoordinator.autotune(
                    categorizeUamAsBasal: categorizeUamAsBasal,
                    tuneInsulinCurve: tuneInsulinCurve
                ).sink { autotune in
                    if let autotune = autotune {
                        info(.openAPS, "‚úÖ Swift Autotune completed successfully")
                        info(.openAPS, "üìä Autotune recommendations ready for review")
                    } else {
                        warning(.openAPS, "‚ö†Ô∏è Swift Autotune returned no results")
                    }
                    promise(.success(autotune))
                }.store(in: &self.cancellables)
            }
        }
    }
}

// MARK: - JavaScript Autosens helpers

extension HybridOpenAPS {
    private func executeJavaScriptAutosens(completion: @escaping (Autosens?) -> Void) {
        debug(.openAPS, "Start autosens")
        let pumpHistory = loadFileFromStorage(name: OpenAPS.Monitor.pumpHistory)
        let carbs = loadFileFromStorage(name: OpenAPS.Monitor.carbHistory)
        let glucose = loadFileFromStorage(name: OpenAPS.Monitor.glucose)
        let profile = loadFileFromStorage(name: OpenAPS.Settings.profile)
        let basalProfile = loadFileFromStorage(name: OpenAPS.Settings.basalProfile)
        let tempTargets = loadFileFromStorage(name: OpenAPS.Settings.tempTargets)

        let autosensResult = autosense(
            glucose: glucose,
            pumpHistory: pumpHistory,
            basalprofile: basalProfile,
            profile: profile,
            carbs: carbs,
            temptargets: tempTargets
        )

        debug(.openAPS, "AUTOSENS: \(autosensResult)")
        if var autosens = Autosens(from: autosensResult) {
            autosens.timestamp = Date()
            storage.save(autosens, as: OpenAPS.Settings.autosense)
            completion(autosens)
        } else {
            warning(.openAPS, "Failed to parse autosens from JavaScript result: \(autosensResult.prefix(200))...")
            completion(nil)
        }
    }

    private func autosense(
        glucose: JSON,
        pumpHistory: JSON,
        basalprofile: JSON,
        profile: JSON,
        carbs: JSON,
        temptargets: JSON
    ) -> RawJSON {
        dispatchPrecondition(condition: .onQueue(processQueue))
        return jsWorker.inCommonContext { worker in
            worker.evaluate(script: Script(name: OpenAPS.Prepare.log))
            worker.evaluate(script: Script(name: OpenAPS.Bundle.autosens))
            worker.evaluate(script: Script(name: OpenAPS.Prepare.autosens))
            return worker.call(
                function: OpenAPS.Function.generate,
                with: [
                    glucose,
                    pumpHistory,
                    basalprofile,
                    profile,
                    carbs,
                    temptargets
                ]
            )
        }
    }
}

// MARK: - Profile creation and Autotune integration for APSManager compatibility

extension HybridOpenAPS {
    func makeProfiles(useAutotune: Bool = false) -> Future<Autotune?, Never> {
        Future { promise in
            self.processQueue.async {
                info(.openAPS, "üöÄ FreeAPS X: Swift makeProfiles (JavaScript DISABLED)")

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Swift –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                do {
                    let profileResult = try self.swiftCoordinator.createProfile()

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞
                    let profileJSON = self.convertSwiftProfileToJSON(profileResult)
                    self.storage.save(profileJSON, as: OpenAPS.Settings.profile)

                    // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω autotune - –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    if useAutotune {
                        self.swiftCoordinator.autotune(
                            categorizeUamAsBasal: false,
                            tuneInsulinCurve: false
                        ).sink { autotune in
                            promise(.success(autotune))
                        }.store(in: &self.cancellables)
                    } else {
                        // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π Autotune –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                        let autotune = Autotune(
                            createdAt: Date(),
                            basalProfile: profileResult.basals,
                            sensitivity: Decimal(profileResult.sens),
                            carbRatio: Decimal(profileResult.carbRatioValue)
                        )

                        promise(.success(autotune))
                    }

                } catch {
                    warning(.openAPS, "‚ùå FreeAPS X: Swift profile creation failed: \(error)")
                    promise(.success(nil))
                }
            }
        }
    }

    // MARK: - Profile JSON Conversion

    private func convertSwiftProfileToJSON(_ profileResult: SwiftOpenAPSAlgorithms.ProfileResult) -> String {
        """
        {
            "max_iob": \(profileResult.maxIOB),
            "max_daily_basal": \(profileResult.settings.maxBasal),
            "max_basal": \(profileResult.settings.maxBasal),
            "max_bg": \(profileResult.targets.targets.first?.high ?? 160),
            "min_bg": \(profileResult.targets.targets.first?.low ?? 100),
            "carb_ratio": \(profileResult.carbRatioValue),
            "sens": \(profileResult.sens),
            "current_basal": \(profileResult.currentBasal),
            "dia": \(profileResult.dia),
            "target_bg": \((Double(profileResult.targets.targets.first?.low ?? 100) +
                    Double(profileResult.targets.targets.first?.high ?? 160)) / 2.0),
            "temptargetSet": \(profileResult.temptargetSet),
            "autosens_max": \(profileResult.autosensMax),
            "exercise_mode": \(profileResult.exerciseMode),
            "enableSMB_always": false,
            "enableSMB_with_COB": false,
            "enableUAM": false
        }
        """
    }

    // MARK: - dailyAutotune Function (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å APSManager)

    func dailyAutotune() -> AnyPublisher<Bool, Never> {
        Future<Bool, Never> { promise in
            self.processQueue.async {
                info(.openAPS, "üöÄ FreeAPS X: Swift daily autotune")

                // –ó–∞–ø—É—Å–∫–∞–µ–º autotune —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                self.swiftCoordinator.autotune(
                    categorizeUamAsBasal: false,
                    tuneInsulinCurve: false
                ).sink { autotune in
                    if autotune != nil {
                        info(.openAPS, "‚úÖ Daily autotune completed successfully")
                        promise(.success(true))
                    } else {
                        warning(.openAPS, "‚ö†Ô∏è Daily autotune returned no results")
                        promise(.success(false))
                    }
                }.store(in: &self.cancellables)
            }
        }
        .eraseToAnyPublisher()
    }
}

// MARK: - Settings Management

extension HybridOpenAPS {
    /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç Swift —Ä–µ–∂–∏–º
    func setSwiftMode(_ enabled: Bool, withComparison: Bool = false) {
        var settings = loadSettings()
        settings.useSwiftOpenAPS = enabled
        settings.logSwiftVsJSComparison = withComparison

        storage.save(settings, as: OpenAPS.FreeAPS.settings)

        if enabled {
            info(.openAPS, "üöÄ FreeAPS X: Swift OpenAPS ENABLED - Performance mode activated!")
            if withComparison {
                info(.openAPS, "üìä JavaScript comparison logging ENABLED for transparency")
            }
        } else {
            info(.openAPS, "üìú FreeAPS X: JavaScript OpenAPS mode - Compatibility mode")
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    var isSwiftMode: Bool {
        loadSettings().useSwiftOpenAPS
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    var isComparisonLoggingEnabled: Bool {
        loadSettings().logSwiftVsJSComparison
    }
}

// MARK: - Integration helpers

extension HybridOpenAPS {
    /// –°–æ–∑–¥–∞–µ—Ç HybridOpenAPS –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ storage
    static func create(storage: FileStorage) -> HybridOpenAPS {
        HybridOpenAPS(storage: storage)
    }

    /// –ó–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π OpenAPS –≤ dependency injection
    static func replaceInDI(storage _: FileStorage) {
        // TODO: Integration with Swinject container
        info(.openAPS, "üîÑ HybridOpenAPS registered for dependency injection")
    }
}
