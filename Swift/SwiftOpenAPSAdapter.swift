import Foundation

/// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã JavaScriptWorker –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã–µ Swift –∞–ª–≥–æ—Ä–∏—Ç–º—ã
///
/// –ò–°–ü–û–õ–¨–ó–£–ï–¢ –ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –ú–û–î–£–õ–ò:
/// - IOB/SwiftIOBAlgorithms.swift (1112 —Å—Ç—Ä–æ–∫)
/// - Meal/SwiftMealAlgorithms.swift (744 —Å—Ç—Ä–æ–∫–∏)
/// - Autosens/SwiftAutosensAlgorithms.swift (760 —Å—Ç—Ä–æ–∫)
/// - Core/SwiftDetermineBasalAlgorithms.swift (2600+ —Å—Ç—Ä–æ–∫)
/// - Core/SwiftProfileAlgorithms.swift (435 —Å—Ç—Ä–æ–∫)
///
/// –ó–ê–ú–ï–ù–ê WEBPACK BUNDLE:
/// iob.js (1.3MB) ‚Üí IOB/
/// meal.js (1.3MB) ‚Üí Meal/
/// autosens.js (1.3MB) ‚Üí Autosens/
/// determineBasal.js (20KB) ‚Üí Core/SwiftDetermineBasalAlgorithms.swift
/// profile.js (78KB) ‚Üí Core/SwiftProfileAlgorithms.swift
///
/// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
/// - ‚úÖ 100% —Ç–æ—á–Ω–∞—è –ø–æ—Ä—Ç–∞—Ü–∏—è –∏–∑ oref0
/// - ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~10x –±—ã—Å—Ç—Ä–µ–µ JS
/// - ‚úÖ –ü–∞–º—è—Ç—å: -96% (5.5MB ‚Üí 175KB)
/// - ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
/// - ‚úÖ –õ—É—á—à–∞—è –æ—Ç–ª–∞–¥–∫–∞
///
/// –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
/// ```swift
/// // 1. –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä
/// let adapter = SwiftOpenAPSAdapter(storage: storage)
///
/// // 2. –í–º–µ—Å—Ç–æ JavaScriptWorker
/// let iob = adapter.calculateIOB(...)  // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IOB/SwiftIOBAlgorithms.swift!
/// let meal = adapter.calculateMeal(...) // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Meal/SwiftMealAlgorithms.swift!
/// let autosens = adapter.calculateAutosens(...) // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Autosens/SwiftAutosensAlgorithms.swift!
/// ```

final class SwiftOpenAPSAdapter {
    private let storage: FileStorage
    
    init(storage: FileStorage) {
        self.storage = storage
    }
    
    // MARK: - IOB Calculation (bundle/iob.js ‚Üí IOB/SwiftIOBAlgorithms.swift)
    
    /// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SwiftIOBAlgorithms
    func calculateIOB(
        pumpHistory: [PumpHistoryEvent],
        profile: Profile,
        clock: Date = Date(),
        autosens: Autosens? = nil
    ) -> Result<IOBResult, OpenAPSError> {
        debug(.openAPS, "üöÄ Swift IOB calculation using IOB/SwiftIOBAlgorithms.swift")
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        let inputs = IOBInputs(
            pumpHistory: pumpHistory,
            profile: profile,
            clock: clock,
            autosens: autosens
        )
        
        // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ IOB/SwiftIOBAlgorithms.swift
        let result = SwiftIOBAlgorithms.calculateIOB(inputs: inputs)
        
        debug(.openAPS, "‚úÖ Swift IOB: \(result.iob) U, activity: \(result.activity)")
        return .success(result)
    }
    
    // MARK: - MEAL Calculation (bundle/meal.js ‚Üí Meal/SwiftMealAlgorithms.swift)
    
    /// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SwiftMealAlgorithms
    func calculateMeal(
        pumpHistory: [PumpHistoryEvent],
        profile: Profile,
        basalProfile: [BasalProfileEntry],
        clock: Date = Date(),
        carbHistory: [CarbsEntry],
        glucoseData: [BloodGlucose]
    ) -> Result<MealResult, OpenAPSError> {
        debug(.openAPS, "üöÄ Swift MEAL calculation using Meal/SwiftMealAlgorithms.swift")
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        let inputs = MealInputs(
            pumpHistory: pumpHistory,
            profile: profile,
            basalProfile: basalProfile,
            clock: clock,
            carbHistory: carbHistory,
            glucoseData: glucoseData
        )
        
        // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ Meal/SwiftMealAlgorithms.swift
        let result = SwiftMealAlgorithms.calculateMeal(inputs: inputs)
        
        debug(.openAPS, "‚úÖ Swift MEAL: COB=\(result.mealCOB)g")
        return .success(result)
    }
    
    // MARK: - AUTOSENS Calculation (bundle/autosens.js ‚Üí Autosens/SwiftAutosensAlgorithms.swift)
    
    /// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SwiftAutosensAlgorithms
    func calculateAutosens(
        glucoseData: [BloodGlucose],
        pumpHistory: [PumpHistoryEvent],
        basalProfile: [BasalProfileEntry],
        profile: Profile,
        carbHistory: [CarbsEntry],
        tempTargets: [TempTarget] = []
    ) -> Result<AutosensResult, OpenAPSError> {
        debug(.openAPS, "üöÄ Swift AUTOSENS calculation using Autosens/SwiftAutosensAlgorithms.swift")
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        let inputs = AutosensInputs(
            glucoseData: glucoseData,
            pumpHistory: pumpHistory,
            basalProfile: basalProfile,
            profile: profile,
            carbHistory: carbHistory,
            tempTargets: tempTargets,
            retrospective: false,
            deviations: 96
        )
        
        // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ Autosens/SwiftAutosensAlgorithms.swift
        let result = SwiftAutosensAlgorithms.calculateAutosens(inputs: inputs)
        
        switch result {
        case .success(let autosens):
            debug(.openAPS, "‚úÖ Swift AUTOSENS: ratio=\(autosens.ratio)")
            return .success(autosens)
        case .failure(let error):
            warning(.openAPS, "Swift AUTOSENS error: \(error)")
            return .failure(error)
        }
    }
    
    // MARK: - DETERMINE-BASAL (bundle/determineBasal.js ‚Üí Core/SwiftDetermineBasalAlgorithms.swift)
    
    /// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SwiftDetermineBasalAlgorithms
    func determineBasal(
        glucose: [BloodGlucose],
        currentTemp: TempBasal?,
        iob: IOBResult,
        profile: Profile,
        autosens: AutosensResult?,
        meal: MealResult,
        microBolusAllowed: Bool = false,
        reservoir: Double?,
        clock: Date = Date()
    ) -> Result<Suggestion, OpenAPSError> {
        debug(.openAPS, "üöÄ Swift DETERMINE-BASAL using Core/SwiftDetermineBasalAlgorithms.swift")
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        let inputs = DetermineBasalInputs(
            glucose: glucose,
            currentTemp: currentTemp,
            iob: iob,
            profile: profile,
            autosens: autosens,
            meal: meal,
            microBolusAllowed: microBolusAllowed,
            reservoir: reservoir,
            clock: clock
        )
        
        // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ Core/SwiftDetermineBasalAlgorithms.swift
        let result = SwiftDetermineBasalAlgorithms.determineBasal(inputs: inputs)
        
        switch result {
        case .success(let suggestion):
            debug(.openAPS, "‚úÖ Swift DETERMINE-BASAL: \(suggestion.reason)")
            return .success(suggestion)
        case .failure(let error):
            warning(.openAPS, "Swift DETERMINE-BASAL error: \(error)")
            return .failure(error)
        }
    }
    
    // MARK: - PROFILE (bundle/profile.js ‚Üí Core/SwiftProfileAlgorithms.swift)
    
    /// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SwiftProfileAlgorithms
    func makeProfile(
        pumpSettings: PumpSettings,
        bgTargets: BGTargets,
        isf: InsulinSensitivities,
        basalProfile: [BasalProfileEntry],
        preferences: Preferences,
        carbRatios: CarbRatios,
        tempTargets: [TempTarget] = [],
        model: String? = nil,
        autotune: Autotune? = nil
    ) -> Result<Profile, OpenAPSError> {
        debug(.openAPS, "üöÄ Swift PROFILE creation using Core/SwiftProfileAlgorithms.swift")
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        let inputs = ProfileInputs(
            pumpSettings: pumpSettings,
            bgTargets: bgTargets,
            isf: isf,
            basalProfile: basalProfile,
            preferences: preferences,
            carbRatios: carbRatios,
            tempTargets: tempTargets,
            model: model,
            autotune: autotune
        )
        
        // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ Core/SwiftProfileAlgorithms.swift
        let result = SwiftProfileAlgorithms.makeProfile(inputs: inputs)
        
        switch result {
        case .success(let profile):
            debug(.openAPS, "‚úÖ Swift PROFILE: DIA=\(profile.dia), basal=\(profile.current_basal)")
            return .success(profile)
        case .failure(let error):
            warning(.openAPS, "Swift PROFILE error: \(error)")
            return .failure(error)
        }
    }
}

// MARK: - Feature Flags –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏

extension SwiftOpenAPSAdapter {
    /// Feature flags –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è Swift –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    enum FeatureFlag {
        static var useSwiftIOB = false
        static var useSwiftMeal = false
        static var useSwiftAutosens = false
        static var useSwiftDetermineBasal = false
        static var useSwiftProfile = false
        
        /// –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ Swift –∞–ª–≥–æ—Ä–∏—Ç–º—ã (–û–°–¢–û–†–û–ñ–ù–û! –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ!)
        static func enableAll() {
            useSwiftIOB = true
            useSwiftMeal = true
            useSwiftAutosens = true
            useSwiftDetermineBasal = true
            useSwiftProfile = true
            
            info(.openAPS, "üöÄ All Swift algorithms enabled!")
        }
        
        /// –í–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (Profile, GlucoseGetLast)
        static func enableSafe() {
            useSwiftProfile = true
            info(.openAPS, "üü¢ Safe Swift algorithms enabled (Profile)")
        }
        
        /// –í–∫–ª—é—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å—á–µ—Ç–∞ (IOB, MEAL) - —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        static func enableCalculations() {
            useSwiftIOB = true
            useSwiftMeal = true
            info(.openAPS, "üü° Calculation Swift algorithms enabled (IOB, MEAL)")
        }
        
        /// –í–∫–ª—é—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (AUTOSENS, DetermineBasal) - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï!
        static func enableCritical() {
            useSwiftAutosens = true
            useSwiftDetermineBasal = true
            warning(.openAPS, "üî¥ CRITICAL Swift algorithms enabled! TEST THOROUGHLY!")
        }
    }
}

// MARK: - Wrapper –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º

extension SwiftOpenAPSAdapter {
    /// Wrapper –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã JavaScriptWorker
    func calculateIOBWithFallback(
        pumpHistory: [PumpHistoryEvent],
        profile: Profile,
        clock: Date = Date(),
        autosens: Autosens? = nil,
        fallback: () -> IOBResult
    ) -> IOBResult {
        guard FeatureFlag.useSwiftIOB else {
            debug(.openAPS, "‚ö†Ô∏è Swift IOB disabled, using JavaScript fallback")
            return fallback()
        }
        
        switch calculateIOB(pumpHistory: pumpHistory, profile: profile, clock: clock, autosens: autosens) {
        case .success(let result):
            return result
        case .failure(let error):
            warning(.openAPS, "Swift IOB failed, using fallback: \(error)")
            return fallback()
        }
    }
}

// MARK: - Migration Guide

/*
 
 –ü–û–®–ê–ì–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –° JAVASCRIPT –ù–ê SWIFT:
 
 ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 ‚ïë –≠–¢–ê–ü 1: SANDBOX –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (1-2 –Ω–µ–¥–µ–ª–∏)                            ‚ïë
 ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
 ‚ïë 1. –í–∫–ª—é—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ Profile:                                          ‚ïë
 ‚ïë    FeatureFlag.enableSafe()                                           ‚ïë
 ‚ïë                                                                       ‚ïë
 ‚ïë 2. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Swift vs JavaScript:                          ‚ïë
 ‚ïë    - –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞                                         ‚ïë
 ‚ïë    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç ¬±1%                                      ‚ïë
 ‚ïë    - –ù–ï –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ Swift —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É                       ‚ïë
 ‚ïë                                                                       ‚ïë
 ‚ïë 3. –ï—Å–ª–∏ –≤—Å–µ –û–ö ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≠–¢–ê–ü 2                                 ‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 
 ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 ‚ïë –≠–¢–ê–ü 2: IOB –ò MEAL (1-2 –Ω–µ–¥–µ–ª–∏)                                      ‚ïë
 ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
 ‚ïë 1. –í–∫–ª—é—á–∏—Ç–µ IOB –∏ MEAL:                                               ‚ïë
 ‚ïë    FeatureFlag.enableCalculations()                                   ‚ïë
 ‚ïë                                                                       ‚ïë
 ‚ïë 2. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ:                                                        ‚ïë
 ‚ïë    - IOB –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å JS ¬±0.1U                                  ‚ïë
 ‚ïë    - COB –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å JS ¬±5g                                    ‚ïë
 ‚ïë    - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ TIR                                           ‚ïë
 ‚ïë                                                                       ‚ïë
 ‚ïë 3. –ï—Å–ª–∏ –≤—Å–µ –û–ö ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≠–¢–ê–ü 3                                 ‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 
 ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 ‚ïë –≠–¢–ê–ü 3: AUTOSENS –ò DETERMINE-BASAL (2-4 –Ω–µ–¥–µ–ª–∏)                      ‚ïë
 ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
 ‚ïë 1. –í–∫–ª—é—á–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:                                    ‚ïë
 ‚ïë    FeatureFlag.enableCritical()                                       ‚ïë
 ‚ïë                                                                       ‚ïë
 ‚ïë 2. –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:                                         ‚ïë
 ‚ïë    - Autosens ratio –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å ¬±0.05                            ‚ïë
 ‚ïë    - Basal recommendations –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å                           ‚ïë
 ‚ïë    - SMB recommendations –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å                             ‚ïë
 ‚ïë    - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –í–°–ï –º–µ—Ç—Ä–∏–∫–∏                                           ‚ïë
 ‚ïë                                                                       ‚ïë
 ‚ïë 3. A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏                                  ‚ïë
 ‚ïë 4. –ï—Å–ª–∏ –≤—Å–µ –û–ö ‚Üí –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å JavaScript!                            ‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 
 –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
 
 // –í FreeAPS X –∫–æ–¥–µ:
 class OpenAPSManager {
     private let jsWorker = JavaScriptWorker()
     private let swiftAdapter = SwiftOpenAPSAdapter(storage: storage)
     
     func calculateIOB() -> IOBResult {
         // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å fallback
         return swiftAdapter.calculateIOBWithFallback(
             pumpHistory: pumpHistory,
             profile: profile,
             clock: Date(),
             autosens: autosens,
             fallback: {
                 // Fallback –Ω–∞ JavaScript –µ—Å–ª–∏ Swift –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ —É–ø–∞–ª
                 jsWorker.calculateIOB(...)
             }
         )
     }
 }
 
 –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
 - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –º–∏–Ω–∏–º—É–º 1-2 –Ω–µ–¥–µ–ª–∏!
 - –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Swift vs JavaScript!
 - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (TIR, –≥–∏–ø–æ —Å–æ–±—ã—Ç–∏—è)!
 - –ò–º–µ–π—Ç–µ rollback –ø–ª–∞–Ω!
 
 */
